{"version":3,"sources":["components/Nav/index.js","components/Main/index.js","components/Gameinfo/index.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","react_default","a","createElement","className","class","href","score","topScore","Main","images","map","picture","key","id","onClick","handleClick","src","alt","Gameinfo","App","state","clicked","imgIndex","_this","forEach","img","index","lostGame","setState","generateRandomImgs","imagesRdm","sort","Math","random","this","BrowserRouter","components_Nav","components_Gameinfo","components_Main","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5a032254.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Nav(props) {\n  return (\n    <nav className=\"navbar\">\n            <div className=\"nav-items col-md-4\">\n                <h1><a class=\"nav-link\" href=\"/\">Clicky Game</a></h1>\n            </div>\n            <div className=\"nav-items col-md-4\"><h1>Click an image to begin!</h1></div>\n            <div className=\"nav-items col-md-4\"><h1>Scores: {props.score} | Top Score: {props.topScore}</h1></div>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Main (props){\n    return (\n        <div className=\"row container\">\n        {/* {console.log(this.state.images)} */}\n        {props.images.map(picture => {\n          return (\n            <div className=\"col-md-3 image-div\" key={picture.id} onClick={() => props.handleClick(picture.id)}>\n                <img className=\"images\" src={picture.src} alt=\"\"  id={picture.id}  />\n            </div>               \n          )\n        })}\n        </div>\n    )}\nexport default Main","import React from \"react\";\nimport \"./style.css\";\n\nfunction Gameinfo() {\n  return (\n\n  <header className=\"Game-info\">\n      <h1>Clicky Game</h1>\n      <p>Click on an image to earn points, but don't click on any more than once!</p>\n  </header>\n\n  );\n}\n\nexport default Gameinfo;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport './App.css';\nimport Nav from \"./components/Nav\";\nimport Main from \"./components/Main\";\nimport Gameinfo from \"./components/Gameinfo\";\n\n\n\nclass App extends Component {\n   // Setting the component's initial state\n   state = {\n    score: 0,\n    topScore: 0,\n    images:[]\n  };\n\n  images = [\n    {id:1, src:\"/assets/images/ironman.png\", clicked:false},\n    {id:2, src:\"/assets/images/blackpanther.png\", clicked:false},\n    {id:3, src:\"/assets/images/blackwidow.png\", clicked:false},\n    {id:4, src:\"/assets/images/captain.png\", clicked:false},\n    {id:5, src:\"/assets/images/drstrange.png\", clicked:false},\n    {id:6, src:\"/assets/images/falcon.png\", clicked:false},\n    {id:7, src:\"/assets/images/hawk.png\", clicked:false},\n    {id:8, src:\"/assets/images/hulk.png\", clicked:false},\n    {id:9, src:\"/assets/images/vision.png\", clicked:false},\n    {id:10, src:\"/assets/images/peter.png\", clicked:false},\n    {id:11, src:\"/assets/images/spiderman.png\", clicked:false},\n    {id:12, src:\"/assets/images/thor.png\", clicked:false},\n  ];\n\n  handleClick = id => {\n    // Preventing the default behavior of the form submit (which is to refresh the page)\n    // event.preventDefault();\n    let imgIndex = -1\n    this.state.images.forEach( function (img, index){\n      if (img.id == id){\n        imgIndex=index\n      }\n    })\n    if (this.images[imgIndex].clicked){\n      this.lostGame()\n    }\n    else{\n      this.images[imgIndex].clicked=true\n      if (this.state.score>=this.state.topScore || this.state.topScore===0){\n       this.setState({ score: this.state.score + 1, topScore: this.state.topScore +1 })\n      }\n      else{\n        this.setState({ score: this.state.score + 1})\n      }\n      this.generateRandomImgs()\n\n    }\n  };\n  generateRandomImgs = () => {\n    let imagesRdm = this.images.sort(() => 0.5 - Math.random())\n    this.setState({images:imagesRdm});\n  }\n  lostGame = () => {\n    this.setState({score: 0})\n    this.images.forEach(function (img){\n      img.clicked = false\n    })\n    this.generateRandomImgs()\n\n  }\n  componentDidMount() {\n      this.generateRandomImgs()\n  }\n  render() {\n    return (\n      <Router>\n        <div>\n          <Nav \n            score = {this.state.score}\n            topScore = {this.state.topScore}\n          />\n          <Gameinfo />\n          <Main \n            images = {this.state.images}\n            handleClick = {this.handleClick}\n          />\n          {/* <Route exact path=\"/\" component={Main} /> */}\n        </div>\n      </Router>   \n      \n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}